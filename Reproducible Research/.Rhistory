setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0, 1, 2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"Robert")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect <- c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo","bar","norf")
>identical()
?identical
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight","bp","rating","test")
?colnames
colnames(my_data) <- cnames
my_data
q()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 ==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8
| || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 >
| 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hello","World","!")
submit()
submit()
mad_libs(name="Rob",place="Wilmington",adjective="fat")
submit()
"I" %p% "Love" %p% "R"
"I" %p% "Love" %p% "R!"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
q()
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
install.packages(p, quiet = TRUE)
install.packages("dplyr")
library(swirl)
swirl()
?read.csv
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_od, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country ==
"US")
?Comparison
filter(cran, country ==
"IN")
filter(cran, country ==
"IN", r_version <= "3.0.2")
filter(cran, country == "US" | country
| == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
:
arrange(cran2, desc(ip_id)
)
)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/ 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sums, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_counts_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
separate()
?separate
separate(res,  sex_class, c("sex","class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
?mutate
?parse_number
submit()
?mutate
submit()
students4
?select
submit()
submit()
submit()
passed
failed
?mutate
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
?group_by
submit()
q()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 14, mins = 10)
this_moment <- update(this_moment, hours = 14, minutes = 10)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
interval()
?interval
how_long <- interval(last_time %--% arrive)
how_long <- interval(start = last_time, end = arrive)
as.period(how_long)
stopwatch()
q()
?rm
source('~/Documents/git/DataClean/run_analysis.R')
source('~/Documents/git/DataClean/run_analysis.R')
View(tidydata)
View(newdataset)
?data.frame
?row.names()
row.names(newdataset) <- NULL
View(newdataset)
q()
source('~/Documents/git/DataClean/run_analysis.R')
View(tidydata)
View(newdataset)
source('~/Documents/git/DataClean/run_analysis.R')
View(newdataset)
q()
?points
?plot
?dev.copy2pdf
source('~/Documents/Data Science Specialization/Exploratory Data Analysis/Week1/runanalysis.R')
source('~/Documents/Data Science Specialization/Exploratory Data Analysis/Week1/runanalysis.R')
source('~/Documents/Data Science Specialization/Exploratory Data Analysis/Week1/runanalysis.R')
file.exists("household_power_consumption.txt")
file.exists("household_power_consumption.tx")
?rm
!file.exists("household_power_consumption.txt")
source('~/Documents/Data Science Specialization/Exploratory Data Analysis/Week1/runanalysis.R')
source('~/Documents/Data Science Specialization/Exploratory Data Analysis/Week1/runanalysis.R')
source('~/Documents/git/ExpWeek1/plot1.R')
source('~/Documents/git/ExpWeek1/plot2.R')
source('~/Documents/git/ExpWeek1/plot3.R')
source('~/Documents/git/ExpWeek1/plot4.R')
q()
install.packages("lattice")
install.packages("nlme")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?nlme
?xyplot
?BodyWeight
?text
?panel.text
?par
library(datasets)
data(airquality)
?qplot
library(ggplot2)
install.packages("ggplot2")
?qplot
library(ggplot2)
?qplot
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
print(g)
qplot(votes, rating, data = movies)
?qplot
qplot(votes, rating, data = movies) + geom_smooth()
q()
setwd("~/Documents/git/RepData_PeerAssessment1")
activity <- read.csv("activity.zip")
View(activity)
?unzip
activity <- read.csv("activity.csv")
head(activity)
activity$date <- as.Date(activity$Date)
?as.Date
activity$date <- as.Date(activity$Date, %Y-%m-%d)
activity$date <- as.Date(activity$Date, "%Y-%m-%d")
?read.csv
activity <- read.csv("activity.csv", colClasses = c("numeric", "Date","numeric"))
head(activity)
typeof(activity[1,2])
activity[1,2]
activity <- read.csv("activity.csv", colClasses = c(NA, "Date",NA))
head(activityy)
head(activity)
activity <- read.csv("activity.csv", colClasses = c(NA, "Date",NA), as.is= TRUE)
head(activity)
activity <- read.csv("activity.csv", colClasses = c(NA, "POSIXct",NA), as.is= TRUE)
head(activity)
activity[[2]] <- as.Date(activity[[2]])
head(activity)
typeof(activity[1,2])
activity <- read.csv("activity.csv")
activity[,2] <- strptime(data[,2], "%Y-%m-%d")
activity <- read.csv("activity.csv")
activity[,2] <- strptime(activity[,2], "%Y-%m-%d")
activity <- read.csv("activity.csv")
activity[,2] <- as.POSIXct(strptime(activity[,2], "%Y-%m-%d"))
head(activity)
typeof(activity[1,2])
activity <- read.csv("activity.csv", as.is=TRUE)
activity[,2] <- as.POSIXct(strptime(activity[,2], "%Y-%m-%d"))
typeof(activity[1,2])
activity <- read.csv("activity.csv", as.is=TRUE)
activity[[2]] <- as.POSIXct(strptime(activity[[2]], "%Y-%m-%d"))
typeof(activity[1,2])
library(dplyr)
activity <- tbl_df(read.csv("activity.csv"))
activity <- mutate(activity, date = as.POSIXct(strptime(date, "%Y-%m-%d"))
)
head(activity)
?range
range(activity$interval)
2355/60
2355 % 60
?as.POSIXct
activity <- tbl_df(read.csv("activity.csv"))
str(activity)
activity <- mutate(day = as.POSIXct(strptime(paste(date,time), "%Y-%m-%d %H-%M"))
)
?dplyr
?filter
?select
levels(activity$date)
?colSums
activity %>%
group_by(date) %>%
colSums(steps, na.rm = TRUE) %>%
mean()
?group_by
?sum
by_date <- group_by(activity, date)
total_steps <- sum(by_date$steps, na.rm=TRUE)
setwd("~/Documents/git/RepData_PeerAssessment1")
?plot
?arrange
q()
